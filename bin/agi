#!/usr/bin/env python3
import os
import sys
import argparse

if __name__ == '__main__':
    # Find AGI's location and its prefix
    agi_bin = os.path.realpath(os.path.expanduser(__file__))
    agi_prefix = os.path.dirname(os.path.dirname(agi_bin))

    # Allow AGI libs to be imported in our scripts
    agi_lib_path = os.path.join(agi_prefix, "src")
    sys.path.insert(0, agi_lib_path)

    # Import AGI modules
    from AGI.AGI import AGI

    # Main parser
    parser = argparse.ArgumentParser(description='Monitor and analyze resource usage of a workload with AGI')

    # Subparsers
    subparsers = parser.add_subparsers(dest='subcommand', help='sub-command help')

    # Profile subcommand
    parser_profile = subparsers.add_parser('profile', help='Profile command help')
    parser_profile.add_argument('--wrap', '-w', metavar='wrap', type=str, nargs='+', help='Wrapped command to run', required=True)
    parser_profile.add_argument('--label', '-l', metavar='label', type=str, help='Workload label', required=True)
    parser_profile.add_argument('--max-runtime', '-m', metavar='max-runtime', type=int, default=0, help='Maximum runtime of the wrapped command in seconds')
    parser_profile.add_argument('--sampling-time', '-t', metavar='sampling-time', type=int, default=500, help='Sampling time of GPU metrics in milliseconds')
    parser_profile.add_argument('--force-overwrite', '-f', action='store_true', help='Force overwrite of output file', default=False)
    parser_profile.add_argument('--append', '-a', action='store_true', help='Append profiling data to the output file', default=False)
    parser_profile.add_argument('--output-folder', '-o', metavar='output-folder', type=str, default=None, help='Output folder for the profiling data', required=True)
    parser_profile.add_argument('--format', '-fmt', metavar='output-format', type=str, choices=['json', 'binary'], default='binary', help='Output format for the profiling data')
    
    parser_export = subparsers.add_parser('export', help='Export command help')
    group = parser_export.add_mutually_exclusive_group(required=True)
    group.add_argument('--input-files', '-i', type=str, nargs='+', help='Input files for export')
    group.add_argument('--input-folder', '-if', type=str, help='Input folder for export')
    parser_export.add_argument('--format', '-fmt', type=str, choices=['json', 'binary'], default='binary', help='Input format of the profiling data')
    parser_export.add_argument('--output', '-o', type=str, required=False, help='Output file for export')
    parser_export.add_argument('--force-overwrite', '-f', action='store_true', help='Force overwrite of output file', default=False)

    # Analyze subcommand
    parser_analyze = subparsers.add_parser('analyze', help='Analyze command help')
    parser_analyze.add_argument('--input-file', '-i', type=str, required=True, help='Input file for analysis')
    parser_analyze.add_argument('--no-report', '-nrp', action="store_true", default=False, help='Hide report of metrics')
    parser_analyze.add_argument('--show-metadata', '-mtd', action='store_true', default=False, help='Generate metadata for the input SQL file')
    parser_analyze.add_argument('--plot-time-series', '-pts', action='store_true', help='Generate time-series plots of metrics')
    parser_analyze.add_argument('--plot-load-balancing', '-plb', action='store_true', help='Generate load-balancing plots of metrics')
    parser_analyze.add_argument('--plot-histogram', '-phist', action='store_true', help='Plot histograms of metrics')

    # Parse arguments
    args = parser.parse_args()

    # Run appropriate command
    agi_obj = AGI(args)

    if args.subcommand in ['profile', 'export', 'analyze']:
        agi_obj.run()
    else:
        # Print help if no valid subcommand is given
        parser.print_help()
