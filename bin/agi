#!/usr/bin/env python3
import os
import sys
import argparse

if __name__ == '__main__':

    # Find AGI's location and its prefix
    AGIBin = os.path.realpath(os.path.expanduser(__file__))
    AGIPrefix = os.path.dirname(os.path.dirname(AGIBin))

    # Allow AGI libs to be imported in our scripts
    AGILibPath = os.path.join(AGIPrefix, "src")
    sys.path.insert(0, AGILibPath)

    # Import AGI modules
    from AGI.AGI import AGI

    # Parse arguments

    # Main parser
    parser = argparse.ArgumentParser(description='Monitor and analyze resource usage of a workload with AGI')

    # Subparsers
    subparsers = parser.add_subparsers(dest='subcommand', help='sub-command help')

    # Profile subcommand
    parser_profile = subparsers.add_parser('profile', help='Profile command help')
    parser_profile.add_argument('--wrap', '-w', metavar='wrap', type=str, nargs='+', help='Wrapped command to run', required=True)
    parser_profile.add_argument('--label', '-l', metavar='label', type=str, help='Workload label.', required=False)
    parser_profile.add_argument('--max-runtime', '-m', metavar='max-runtime', type=int, default=600, help='Maximum runtime of the wrapped command in seconds')
    parser_profile.add_argument('--sampling-time', '-t', metavar='sampling-time', type=int, default=500, help='Sampling time of GPU metrics in milliseconds')
    parser_profile.add_argument('--verbose', '-v', action='store_true', help='Print verbose GPU metrics to stdout')
    parser_profile.add_argument('--force-overwrite', '-f', action='store_true', help='Force overwrite of output file', default=False)
    parser_profile.add_argument('--append', '-a', action='store_true', help='Append profiling data to the output file', default=False)
    parser_profile.add_argument('--output-file', '-o', metavar='output-file', type=str, default=None, help='Output SQL file for collected GPU metrics', required=True)
    parser_profile.add_argument('--dry-run', '-d', action='store_true', help='Debug flag used to run a workload through AGI without collecting any metrics.', default=False)

    # Analyze subcommand
    parser_analyze = subparsers.add_parser('analyze', help='Analyze command help')
    parser_analyze.add_argument('--input-file', '-i', type=str, required=True, help='Input file for analysis')
    parser_analyze.add_argument('--no-summary', '-ns', action="store_true", default=False, help='Hide summary of metrics.')
    parser_analyze.add_argument('--show-metadata', '-mtd', action='store_true',  default=False, help='Generate metadata for the input SQL file.')
    parser_analyze.add_argument('--verbosity', '-v', type=str, help='Set verbosity of the summary. Default is "medium".', choices=['low', 'medium', 'high'], default='medium')
    parser_analyze.add_argument('--detect-outliers', '-d', type=str, default='none', choices=['leading', 'trailing', 'none', 'all'],
                                help='Heuristically detect outlier samples and discard them from the analysis')
    parser_analyze.add_argument('--auto-diagnose', '-ad', type=bool, help='Print summary of metrics. Default is True.')
    parser_analyze.add_argument('--plot-time-series', '-pts', action='store_true', help='Generate time-series plots of metrics.')
    parser_analyze.add_argument('--plot-load-balancing', '-plb', action='store_true', help='Generate load-balancing plots of metrics.')

    # Parse arguments
    args = parser.parse_args()

    # Run appropriate command
    AGIObj = AGI(args)

    if args.subcommand in ['profile', 'analyze']:
        AGIObj.run()
    else:
        # Print help if no valid subcommand is given
        parser.print_help()